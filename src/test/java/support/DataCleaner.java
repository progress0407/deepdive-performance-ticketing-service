package support;

import jakarta.annotation.PostConstruct;
import jakarta.persistence.*;
import jakarta.persistence.metamodel.EntityType;
import org.apache.logging.log4j.util.Strings;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import static java.util.stream.Collectors.toList;

@Component
public class DataCleaner {

    @PersistenceContext
    EntityManager entityManager;

    List<TableTuple> tableTuples;

    @PostConstruct
    public void init() {
        this.tableTuples = getAllTableTuples();
    }

    @Transactional
    public void execute() {
        entityManager.flush();

        dereferenceForeignKey();

        for (TableTuple tuple : tableTuples) {
            truncate(tuple);
            generateId(tuple);
        }

        setReferentialIntegrity();
    }

    private void setReferentialIntegrity() {

        entityManager.createNativeQuery("SET REFERENTIAL_INTEGRITY TRUE").executeUpdate();
    }

    private void dereferenceForeignKey() {

        entityManager.createNativeQuery("SET REFERENTIAL_INTEGRITY FALSE").executeUpdate();
    }

    private void truncate(TableTuple tuple) {

        entityManager
                .createNativeQuery("TRUNCATE TABLE " + tuple.name).executeUpdate();
    }

    private void generateId(TableTuple tuple) {

        entityManager
                .createNativeQuery("ALTER TABLE " + tuple.name + " ALTER COLUMN " + tuple.id + " RESTART WITH 1")
                .executeUpdate();
    }

    private List<TableTuple> getAllTableTuples() {

        return getAllEntities().stream()
                .map(EntityType::getJavaType)
                .map(TableTuple::of)
                .filter(TableTuple::isAutoGeneratedId)
                .collect(toList());
    }

    private Set<EntityType<?>> getAllEntities() {

        return entityManager.getMetamodel().getEntities();
    }

    private static class TableTuple {

        public String name;
        public String id;

        public TableTuple(final String name, final String id) {
            this.name = name;
            this.id = id;
        }

        public static TableTuple of(Class<?> entityType) {

            return new TableTuple(tableName(entityType), id(entityType));
        }

        private static String tableName(final Class<?> entityType) {

            return entityType.getAnnotation(Table.class).name();
        }

        private static String id(final Class<?> entityType) {

            return Arrays.stream(entityType.getDeclaredFields())
                    .filter(field -> field.getAnnotation(Id.class) != null)
                    .filter(field -> field.getAnnotation(GeneratedValue.class) != null)
                    .map(Field::getName)
                    .findAny()
                    .orElse(Strings.EMPTY);
        }

        public static boolean isAutoGeneratedId(TableTuple tableTuple) {
            return !tableTuple.id.equals(Strings.EMPTY);
        }
    }
}
