package numble.deepdive.performanceticketingservice.support.datacleaner;

import jakarta.annotation.PostConstruct;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.metamodel.EntityType;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Set;

@Component
@RequiredArgsConstructor
public class DataCleaner {

    @PersistenceContext
    private final EntityManager entityManager;

    private final DialectStatement statement = new MySQLStatement();

    List<TableTuple> tableTuples;

    @PostConstruct
    public void init() {
        this.tableTuples = getAllTableTuples();
    }

    @Transactional
    public void execute() {
        entityManager.flush();

        dereferenceForeignKey();

        for (TableTuple tuple : tableTuples) {
            truncate(tuple);
//            resetIncrementedId(tuple);
        }

        setReferentialIntegrity();
    }

    private void dereferenceForeignKey() {

        entityManager.createNativeQuery(statement.dereferenceForeignKey()).executeUpdate();
    }

    private void truncate(TableTuple tuple) {

        entityManager
                .createNativeQuery(statement.truncate(tuple))
                .executeUpdate();
    }

    /**
     * 증가된 ID를 원래 상태로 되돌려놓는다
     * <br>
     * mysql 에서는 auto_increment 를 1로 초기화하는 방법이 없다
     */
    private void resetIncrementedId(TableTuple tableTuple) {

        entityManager
                .createNativeQuery(statement.resetIncrementedId(tableTuple))
                .executeUpdate();
    }

    private List<TableTuple> getAllTableTuples() {

        Set<EntityType<?>> allEntities = getAllEntities();

        return allEntities.stream()
                .map(EntityType::getJavaType)
                .map(TableTuple::of)
                .filter(TableTuple::isAutoGeneratedId)
                .toList();
    }

    private Set<EntityType<?>> getAllEntities() {

        return entityManager.getMetamodel().getEntities();
    }

    private void setReferentialIntegrity() {

        entityManager.createNativeQuery(statement.referenceForeignKey()).executeUpdate();
    }
}
